import{_ as n,c as t,j as e,a as r,o as i}from"./chunks/framework.DEWO2zTc.js";const u=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"learning/mvvm/vue/index.md","filePath":"learning/mvvm/vue/index.md"}'),o={name:"learning/mvvm/vue/index.md"};function d(l,a,s,m,c,V){return i(),t("div",null,a[0]||(a[0]=[e("h1",{id:"概述",tabindex:"-1"},[r("概述 "),e("a",{class:"header-anchor",href:"#概述","aria-label":'Permalink to "概述"'},"​")],-1),e("p",null,"Vue中MVVM中的VM，ViewModel层中 Model的改变来触发View视图的更新。 View的变化通过事件机制，同步给Model数据模型。 Model到View的更新，主要分为两个步骤，一个是依赖收集。 另一个是视图更新的过程。 依赖收集的过程，负责追踪和记录哪些组件依赖哪些数据，当数据发生变化的时候，相应的组件能够 进行视图的更新。 视图更新的过程，负责将数据的变化反应在视图上。 Vue的MVVM的学习，通过UML类图作为切入点，展示在依赖收集的过程中，涉及到的重要的类以及类间关系。 在视图更新的过程中，分析Vue是如何操作DOM树，以及采用什么算法进行增量更新。",-1)]))}const v=n(o,[["render",d]]);export{u as __pageData,v as default};
