import{_ as i,c as a,aO as t,o as n}from"./chunks/framework.DEWO2zTc.js";const h="/blogBuild/arkUI/statedecorator.png",l="/blogBuild/arkUI/propdecorator.png",e="/blogBuild/arkUI/linkdecorator.png",k="/blogBuild/arkUI/providedecorator.png",p="/blogBuild/arkUI/consumedecorator.png",r="/blogBuild/arkUI/provideConsume.png",d="/blogBuild/arkUI/objectLinkdecorator.png",C=JSON.parse('{"title":"V1管理组件状态","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/webFramework/arkUI/StateMat/index.md","filePath":"knowledge/webFramework/arkUI/StateMat/index.md"}'),E={name:"knowledge/webFramework/arkUI/StateMat/index.md"};function o(g,s,y,c,F,b){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="v1管理组件状态" tabindex="-1">V1管理组件状态 <a class="header-anchor" href="#v1管理组件状态" aria-label="Permalink to &quot;V1管理组件状态&quot;">​</a></h1><h3 id="state" tabindex="-1">@State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;@State&quot;">​</a></h3><p>为状态变量，一旦变量拥有了状态属性，就可以触发其直接绑定UI组件的刷新。当状态改变时，UI会发生对应的渲染改变。</p><h4 id="同步类型" tabindex="-1">同步类型 <a class="header-anchor" href="#同步类型" aria-label="Permalink to &quot;同步类型&quot;">​</a></h4><p>不与父组件中任何类型的变量同步。</p><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>必须本地初始化。</p><h4 id="变量传递-访问规则" tabindex="-1">变量传递/访问规则 <a class="header-anchor" href="#变量传递-访问规则" aria-label="Permalink to &quot;变量传递/访问规则&quot;">​</a></h4><p><img src="'+h+'" alt="An image"></p><h4 id="允许修饰类型" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>状态变量自身只能观察到第一层的变化, 自身赋值: ✅, 嵌套属性: ❌</td></tr><tr><td>string</td><td>✅</td></tr><tr><td>number</td><td>✅</td></tr><tr><td>boolean</td><td>✅</td></tr><tr><td>enum</td><td>✅</td></tr><tr><td>Map</td><td>✅</td></tr><tr><td>Set</td><td>✅</td></tr><tr><td>ResourceStr</td><td>✅</td></tr><tr><td>ResourceColor</td><td>✅</td></tr><tr><td>Array</td><td>自身赋值: ✅ 数组项赋值: ✅ 删除数组项：✅ 新增数组项: ✅ 数组中属性赋值: ❌</td></tr></tbody></table><h3 id="prop" tabindex="-1">@Prop <a class="header-anchor" href="#prop" aria-label="Permalink to &quot;@Prop&quot;">​</a></h3><p>可以和父组件建立单向的同步关系。@Prop装饰的变量是可变的，但是变化不会同步回其父组件。</p><h4 id="同步类型-1" tabindex="-1">同步类型 <a class="header-anchor" href="#同步类型-1" aria-label="Permalink to &quot;同步类型&quot;">​</a></h4><p>单向同步：对父组件状态变量值的修改，将同步给子组件@Prop装饰的变量</p><h4 id="初始化-1" tabindex="-1">初始化 <a class="header-anchor" href="#初始化-1" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>单项同步允许本地初始化。</p><h4 id="变量传递-访问规则-1" tabindex="-1">变量传递/访问规则 <a class="header-anchor" href="#变量传递-访问规则-1" aria-label="Permalink to &quot;变量传递/访问规则&quot;">​</a></h4><p><img src="'+l+'" alt="An image"></p><h4 id="允许修饰类型-1" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型-1" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>状态变量自身只能观察到第一层的变化, 自身赋值: ✅, 嵌套属性: ❌</td></tr><tr><td>string</td><td>✅</td></tr><tr><td>number</td><td>✅</td></tr><tr><td>boolean</td><td>✅</td></tr><tr><td>enum</td><td>✅</td></tr><tr><td>Map</td><td>✅</td></tr><tr><td>Set</td><td>✅</td></tr><tr><td>ResourceStr</td><td>✅</td></tr><tr><td>ResourceColor</td><td>✅</td></tr><tr><td>Array</td><td>自身赋值: ✅ 数组项赋值: ✅ 删除数组项：✅ 新增数组项: ✅ 数组中属性赋值: ❌</td></tr></tbody></table><h3 id="link" tabindex="-1">Link <a class="header-anchor" href="#link" aria-label="Permalink to &quot;Link&quot;">​</a></h3><h4 id="同步类型-2" tabindex="-1">同步类型 <a class="header-anchor" href="#同步类型-2" aria-label="Permalink to &quot;同步类型&quot;">​</a></h4><p>双向同步。父组件中的状态变量可以与子组件@Link建立双向同步，当其中一方改变时，另外一方能够感知到变化。</p><h4 id="初始化-2" tabindex="-1">初始化 <a class="header-anchor" href="#初始化-2" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>因为是双向同步, 因此，禁止本地初始化。</p><h4 id="变量传递-访问规则-2" tabindex="-1">变量传递/访问规则 <a class="header-anchor" href="#变量传递-访问规则-2" aria-label="Permalink to &quot;变量传递/访问规则&quot;">​</a></h4><p><img src="'+e+'" alt="An image"></p><h4 id="允许修饰类型-2" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型-2" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>状态变量自身只能观察到第一层的变化, 自身赋值: ✅, 嵌套属性: ❌</td></tr><tr><td>string</td><td>✅</td></tr><tr><td>number</td><td>✅</td></tr><tr><td>boolean</td><td>✅</td></tr><tr><td>enum</td><td>✅</td></tr><tr><td>Map</td><td>✅</td></tr><tr><td>Set</td><td>✅</td></tr><tr><td>ResourceStr</td><td>✅</td></tr><tr><td>ResourceColor</td><td>✅</td></tr><tr><td>Array</td><td>自身赋值: ✅ 数组项赋值: ✅ 删除数组项：✅ 新增数组项: ✅ 数组中属性赋值: ❌</td></tr></tbody></table><h3 id="provide和-consume" tabindex="-1">@Provide和@Consume <a class="header-anchor" href="#provide和-consume" aria-label="Permalink to &quot;@Provide和@Consume&quot;">​</a></h3><p>@Provide装饰的状态变量自动对其所有后代组件可用, 后代通过使用@Consume去获取@Provide提供的变量, @Provide和@Consume可以通过相同的变量名或者相同的变量别名绑定，建议类型相同，否则会发生类型隐式转换，从而导致应用行为异常。</p><h4 id="provide" tabindex="-1">@Provide <a class="header-anchor" href="#provide" aria-label="Permalink to &quot;@Provide&quot;">​</a></h4><h4 id="同步类型-3" tabindex="-1">同步类型 <a class="header-anchor" href="#同步类型-3" aria-label="Permalink to &quot;同步类型&quot;">​</a></h4><p>双向：从@Provide变量（具体请参见@Provide）到所有@Consume变量，以及相反的方向。</p><h4 id="初始化-3" tabindex="-1">初始化 <a class="header-anchor" href="#初始化-3" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>双向同步，禁止本地初始化。</p><h4 id="变量传递-访问规则-3" tabindex="-1">变量传递/访问规则 <a class="header-anchor" href="#变量传递-访问规则-3" aria-label="Permalink to &quot;变量传递/访问规则&quot;">​</a></h4><p><img src="'+k+'" alt="An image"></p><h4 id="允许修饰类型-3" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型-3" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>状态变量自身只能观察到第一层的变化, 自身赋值: ✅, 嵌套属性: ❌</td></tr><tr><td>string</td><td>✅</td></tr><tr><td>number</td><td>✅</td></tr><tr><td>boolean</td><td>✅</td></tr><tr><td>enum</td><td>✅</td></tr><tr><td>Map</td><td>✅</td></tr><tr><td>Set</td><td>✅</td></tr><tr><td>ResourceStr</td><td>✅</td></tr><tr><td>ResourceColor</td><td>✅</td></tr><tr><td>Array</td><td>自身赋值: ✅ 数组项赋值: ✅ 删除数组项：✅ 新增数组项: ✅ 数组中属性赋值: ❌</td></tr></tbody></table><h4 id="consume" tabindex="-1">@Consume <a class="header-anchor" href="#consume" aria-label="Permalink to &quot;@Consume&quot;">​</a></h4><h4 id="同步类型-4" tabindex="-1">同步类型 <a class="header-anchor" href="#同步类型-4" aria-label="Permalink to &quot;同步类型&quot;">​</a></h4><p>双向：从@Provide变量（具体请参见@Provide）到所有@Consume变量，以及相反的方向。</p><h4 id="初始化-4" tabindex="-1">初始化 <a class="header-anchor" href="#初始化-4" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>无法从父组件初始化和更新， 通过相同的变量名和alias（别名）从@Provide初始化。 双向同步，禁止本地初始化。</p><h4 id="变量传递-访问规则-4" tabindex="-1">变量传递/访问规则 <a class="header-anchor" href="#变量传递-访问规则-4" aria-label="Permalink to &quot;变量传递/访问规则&quot;">​</a></h4><p><img src="'+p+'" alt="An image"></p><h4 id="允许修饰类型-4" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型-4" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>状态变量自身只能观察到第一层的变化, 自身赋值: ✅, 嵌套属性: ❌</td></tr><tr><td>string</td><td>✅</td></tr><tr><td>number</td><td>✅</td></tr><tr><td>boolean</td><td>✅</td></tr><tr><td>enum</td><td>✅</td></tr><tr><td>Map</td><td>✅</td></tr><tr><td>Set</td><td>✅</td></tr><tr><td>ResourceStr</td><td>✅</td></tr><tr><td>ResourceColor</td><td>✅</td></tr><tr><td>Array</td><td>自身赋值: ✅ 数组项赋值: ✅ 删除数组项：✅ 新增数组项: ✅ 数组中属性赋值: ❌</td></tr></tbody></table><h4 id="provide-cosume-ui更新机制" tabindex="-1">@Provide/@Cosume UI更新机制 <a class="header-anchor" href="#provide-cosume-ui更新机制" aria-label="Permalink to &quot;@Provide/@Cosume UI更新机制&quot;">​</a></h4><p><img src="'+r+`" alt="An image"></p><h3 id="observed和-objectlink" tabindex="-1">@Observed和@ObjectLink <a class="header-anchor" href="#observed和-objectlink" aria-label="Permalink to &quot;@Observed和@ObjectLink&quot;">​</a></h3><p>使用@ObjectLink和@Observed只能监听嵌套后的一级对象属性以及基类属性，无法监听子级及其以下的对象属性。</p><h4 id="observed" tabindex="-1">@Observed <a class="header-anchor" href="#observed" aria-label="Permalink to &quot;@Observed&quot;">​</a></h4><h4 id="允许修饰类型-5" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型-5" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><p>装饰class。需要放在class的定义前，使用new创建类对象。</p><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>✅</td></tr></tbody></table><h4 id="objectlink" tabindex="-1">@ObjectLink <a class="header-anchor" href="#objectlink" aria-label="Permalink to &quot;@ObjectLink&quot;">​</a></h4><h4 id="允许修饰类型-6" tabindex="-1">允许修饰类型 <a class="header-anchor" href="#允许修饰类型-6" aria-label="Permalink to &quot;允许修饰类型&quot;">​</a></h4><p>必须为被@Observed装饰的class实例，必须指定类型。</p><table tabindex="0"><thead><tr><th>支持类型</th><th>观察变化和行为变现</th></tr></thead><tbody><tr><td>class</td><td>✅</td></tr></tbody></table><p>@ObjectLink只能接收被@Observed装饰class的实例，推荐设计单独的自定义组件来渲染每一个数组或对象。此时，对象数组或嵌套对象（属性是对象的对象称为嵌套对象）需要两个自定义组件，一个自定义组件呈现外部数组/对象，另一个自定义组件呈现嵌套在数组/对象内的类对象。可以观察到。<br> 响应式原理:</p><ol><li>@Observed装饰的class的实例会被不透明的代理对象包装，代理了class上的属性的setter和getter方法。</li><li>子组件中@ObjectLink装饰的从父组件初始化，接收被@Observed装饰的class的实例，@ObjectLink的包装类会将自己注册给@Observed class。 -- 注册依赖</li><li>属性更新：当@Observed装饰的class属性改变时，会执行到代理的setter和getter，然后遍历依赖它的@ObjectLink包装类，通知数据更新。</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Observed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  subProp1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Observed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prop1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prop2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is Prop2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prop3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">struct CompA {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @ObjectLink </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ClassA;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 收集依赖，注册依赖, 当修改classA中的一层属性值时，通知所有的订阅者，更新UI</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  @ObjectLink b: ClassB; // a new objectlink variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  private </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sizeFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the private variable does not invoke rendering</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  private </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isRenderText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : number {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.sizeFont</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the change of sizeFont will not invoke rendering, but showing that the function is called</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text prop2 is rendered&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.sizeFont;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop2) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when this.a.prop1 changes, it will invoke Text rerendering</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ bottom: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isRenderText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//if the Text renders, the function isRenderText will be called</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;subProp1 : &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop3.subProp1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//the Text can not observe the change of subProp1. this.b.subProp1 use directly b rather than a.prop3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Entry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">struct Page {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @State </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ClassA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Prop1: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ bottom: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CompA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a})  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  b: this.a.prop3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Change prop1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF007DFF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bottom: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Change subProp1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF007DFF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop3.subProp1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.prop3.subProp1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中，当点击按钮“Change subProp1”时，可以发现页面并没有进行刷新，这是因为对subProp1的更改并没有被组件观测到。当再次点击“Change prop1”时，可以发现页面进行了刷新，同时显示了prop1与subProp1的最新值。依据ArkUI状态管理机制，状态变量自身只能观察到第一层的变化，所以对于“Change subProp1&quot;，对第二层的属性赋值，是无法观察到的，即对this.a.prop3.subProp1的变化并不会引起组件的刷新，即使subProp1的值其实已经产生了变化。而对this.a.prop1的改变则会引起刷新。</p><h4 id="变量传递-访问规则-5" tabindex="-1">变量传递/访问规则 <a class="header-anchor" href="#变量传递-访问规则-5" aria-label="Permalink to &quot;变量传递/访问规则&quot;">​</a></h4><p><img src="`+d+'" alt="An image"></p><h1 id="v2管理组件状态" tabindex="-1">V2管理组件状态 <a class="header-anchor" href="#v2管理组件状态" aria-label="Permalink to &quot;V2管理组件状态&quot;">​</a></h1><p>参考:</p><ol><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-state-V5" target="_blank" rel="noreferrer">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-state-V5</a></li><li></li></ol>',71)]))}const m=i(E,[["render",o]]);export{C as __pageData,m as default};
