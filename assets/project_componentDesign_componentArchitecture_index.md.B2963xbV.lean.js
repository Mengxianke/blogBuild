import{_ as t,c as n,aO as r,o}from"./chunks/framework.DEWO2zTc.js";const a="/blogBuild/project/presentation_container_component.png",h=JSON.parse('{"title":"组织结构","description":"","frontmatter":{},"headers":[],"relativePath":"project/componentDesign/componentArchitecture/index.md","filePath":"project/componentDesign/componentArchitecture/index.md"}'),i={name:"project/componentDesign/componentArchitecture/index.md"};function s(p,e,c,l,d,m){return o(),n("div",null,e[0]||(e[0]=[r('<h1 id="组织结构" tabindex="-1">组织结构 <a class="header-anchor" href="#组织结构" aria-label="Permalink to &quot;组织结构&quot;">​</a></h1><p>梳理与回顾在项目中， 我是如何组织组件。 良好的组织形式，确保数据自顶向下单向流动。保证视图更新的重要性。 同时，良好的组件结构，也能够明确组件的职责。易于维护和管理。</p><h2 id="container-presentation-pattern" tabindex="-1">container-presentation-pattern <a class="header-anchor" href="#container-presentation-pattern" aria-label="Permalink to &quot;container-presentation-pattern&quot;">​</a></h2><p>这种设计模式常用在<strong>父子组件</strong>的组织结构中。对于<strong>复杂的页面</strong>展示提供了一种组织父子组件的一种<strong>方法论</strong>。 <a href="https://angular.love/designing-angular-architecture-container-presentation-pattern" target="_blank" rel="noreferrer">Container-Presentation desgin pattern</a>是一种设计模式, 将组件的职责进行分类，分成容器类组件(Container Component)和展现类组件(Presentation Component)。</p><ol><li>容器组件<br> 负责对外进行数据上的交互，例如与store状态管理进行数据上的交互，从store数据源上订阅数据。但其功能职责并不负责展示。 它将订阅到的数据进行分发，将获取到的数据传入子组件中，保证数据的自顶向下数据流动。</li><li>展现组件<br> 只负责展现，并不真正响应用户的操作，也并不会对数据进行修改，它将监听到用户的动作，通过框架机制，将动作与参数传递到Container容器组件中。 保证展示类的组件不会对数据进行篡改。容器类组件接收到事件后，对事件进行响应，与store进行交互/与Container中维护的本地数据进行交互。</li></ol><p>结构图: <img src="'+a+'" alt="An image"></p>',6)]))}const u=t(i,[["render",s]]);export{h as __pageData,u as default};
