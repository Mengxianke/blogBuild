import{_ as e,c as n,aO as l,G as t,j as a,a as p,B as h,o as r}from"./chunks/framework.DEWO2zTc.js";const k="/blogBuild/hmsPerformance/responseDelay1.png",o="/blogBuild/hmsPerformance/responseDelay2.png",d="/blogBuild/hmsPerformance/responseDelay3.png",c="/blogBuild/hmsPerformance/list/forEach.png",E="/blogBuild/hmsPerformance/list/forEachAnalysis.png",g="/blogBuild/hmsPerformance/list/lazyForEach.png",y="/blogBuild/hmsPerformance/list/lazyForEachDestory.png",m="/blogBuild/hmsPerformance/list/reusable.png",P=JSON.parse('{"title":"响应时延Case","description":"","frontmatter":{},"headers":[],"relativePath":"tech/dfx/userResponse/case/index.md","filePath":"tech/dfx/userResponse/case/index.md"}'),u={name:"tech/dfx/userResponse/case/index.md"};function b(x,s,f,A,D,F){const i=h("el-tree");return r(),n("div",null,[s[0]||(s[0]=l('<h1 id="响应时延case" tabindex="-1">响应时延Case <a class="header-anchor" href="#响应时延case" aria-label="Permalink to &quot;响应时延Case&quot;">​</a></h1><h3 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h3><p>公交地铁规划页面, 滑动列表丢帧。</p><h3 id="trace分析" tabindex="-1">Trace分析 <a class="header-anchor" href="#trace分析" aria-label="Permalink to &quot;Trace分析&quot;">​</a></h3><p>通过Profiler工具抓trace, User Event: 找到滑动事件。在滑动Swipe事件后，检查RenderService泳道, 发现RenderService连续丢帧。</p><p><img src="'+k+'" alt="An image"></p><p><img src="'+o+'" alt="An image"> 寻找RenderService第888帧, 在App侧关联的切片。 发现应用测第888帧开始时间远远滞后于，期望开始时间。因此，合理推断，有任务阻塞了UI线程。</p><p>打开ArkVm，查看调用堆栈。发现在期望开始时间附近，有密集函数执行和调用情况，搜索该函数名称， 发现频繁调用。 <img src="'+d+`" alt="An image"></p><h3 id="根因分析" tabindex="-1">根因分析 <a class="header-anchor" href="#根因分析" aria-label="Permalink to &quot;根因分析&quot;">​</a></h3><p>代码Review</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calcxxxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将计算型任务已经下沉至Native侧</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 此处调用native进行计算任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>查看calcxxx调用点:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 双层for循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calcxxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 进入微任务队列, 执行then后后记</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 省略业务代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>单次CPU计算型任务下沉至Native侧，开启另一个线程单独处理。此处为CPU密集型任务, 进而阻塞了UI线程，导致提交渲染任务执行较晚。</p><h3 id="问题背景-1" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景-1" aria-label="Permalink to &quot;问题背景&quot;">​</a></h3><p>POI下拉搜索页面, 下滑搜索更多，出现卡顿。 单帧超时</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ListItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ListItemGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xxx, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                ListItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 子组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ListItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 底部footer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="trace分析-1" tabindex="-1">Trace分析 <a class="header-anchor" href="#trace分析-1" aria-label="Permalink to &quot;Trace分析&quot;">​</a></h3><h4 id="foreach" tabindex="-1">ForEach <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;ForEach&quot;">​</a></h4><p>首次加载 <img src="`+c+'" alt="An image"> 执行List组件布局测量任务CreateTaskMeasure下, 一共创建N个Item子组件节点. N为分页数量。</p><p>分析: 执行子组件BuildItem和计算子组件布局时间 <img src="'+E+'" alt="An image"> H: CustomNode: BuildItem [...item]</p><p>H: Measure[...item]</p><h4 id="分析" tabindex="-1">分析: <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析:&quot;">​</a></h4><ol><li>创建m个节点，创建没有必要的ListItem</li><li>相比较于计算子组件布局时间Measure[Item], BuildItem耗时更长 通过LazyForEach方法，减少不必要的节点创建，懒加载部分组件 通过resuable方法，布局一样的情况下，减少组件创建时间，</li></ol><h4 id="lazyforeach" tabindex="-1">LazyForEach <a class="header-anchor" href="#lazyforeach" aria-label="Permalink to &quot;LazyForEach&quot;">​</a></h4><p>首次加载 <img src="'+g+'" alt="An image"> 组件销毁 <img src="'+y+'" alt="An image"></p><h4 id="reusable" tabindex="-1">Reusable <a class="header-anchor" href="#reusable" aria-label="Permalink to &quot;Reusable&quot;">​</a></h4><p>首次加载组件进入缓存池， 后续复用 <img src="'+m+`" alt="An image"></p><h4 id="探究deepcopy对丢帧的影响" tabindex="-1">探究DeepCopy对丢帧的影响 <a class="header-anchor" href="#探究deepcopy对丢帧的影响" aria-label="Permalink to &quot;探究DeepCopy对丢帧的影响&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列表子组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> struct xxxItemComponet {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @Prop ....  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父组件初始化，传递至子组件 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @Prop ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @Prop ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>BuildLazyItem创建一个LazyItem项目, 时间瞬间激增。<br> 打开ArkVm查看堆栈信息，BuildLazyItem时间段内，在执行给状态变量进行深拷贝。</p>`,31)),t(i,{style:{"max-width":"600px"},"default-expand-all":!0,data:[{label:"SyncedProperyOneWayPU",children:[{label:"resetLocalValue",children:[{label:"copyObject",children:[{label:"deepCopyObject",children:[{label:"getDeepCopyOfObjectRecrusive",children:[{label:"anonymous",children:[{label:"getDeepCopyOfObjectRecrusive"}]}]}]}]}]}]}],props:{children:"children",label:"label"}}),s[1]||(s[1]=a("h4",{id:"分析-1",tabindex:"-1"},[p("分析: "),a("a",{class:"header-anchor",href:"#分析-1","aria-label":'Permalink to "分析:"'},"​")],-1)),s[2]||(s[2]=a("ol",null,[a("li",null,"当需要拷贝的对象数据较大，一定需要将@Prop => @Link, @Prop目前产生性能问题。"),a("li",null,"在长列表页面，以及已经分页的情况下，优先排查深拷贝问题。")],-1))])}const C=e(u,[["render",b]]);export{P as __pageData,C as default};
