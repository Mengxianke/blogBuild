import{_ as t,c as a,aO as o,o as n}from"./chunks/framework.DEWO2zTc.js";const m=JSON.parse('{"title":"组件通信机制","description":"","frontmatter":{},"headers":[],"relativePath":"project/communication/component/index.md","filePath":"project/communication/component/index.md"}'),r={name:"project/communication/component/index.md"};function i(s,e,c,l,d,p){return n(),a("div",null,e[0]||(e[0]=[o('<h1 id="组件通信机制" tabindex="-1">组件通信机制 <a class="header-anchor" href="#组件通信机制" aria-label="Permalink to &quot;组件通信机制&quot;">​</a></h1><p>回顾组件间的通信机制。 组件间的通信机制，更多说的是组件间如何传递状态变量。 如何从一个组件的状态变量传递到另一个组件的状态变量去。 这种消息的传递与组件树<code>Component Tree</code>有关。 因此，在项目中，会用到如下方案进行状态传递。</p><ol><li><strong>父子组件</strong></li><li><strong>祖先与后代</strong></li><li><strong>状态管理中心</strong></li><li><strong>事件总线</strong></li></ol><h2 id="父子组件" tabindex="-1">父子组件 <a class="header-anchor" href="#父子组件" aria-label="Permalink to &quot;父子组件&quot;">​</a></h2><p>父子组件进行通信，通过框架行为，父组件的状态变量 自顶向下传递到子组件中。子组件通过框架的事件机制，将消息传递给父组件。 实现两者的双向通信。</p><h2 id="祖先与后代" tabindex="-1">祖先与后代 <a class="header-anchor" href="#祖先与后代" aria-label="Permalink to &quot;祖先与后代&quot;">​</a></h2><p>通过依赖注入的形式，<code>Provide/Inject</code>将依赖注入到后代组件中。 后代组件能够直接访问到注入的状态变量。 这样做能够减少传递的层级。</p><h2 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h2><p>Store状态管理中心， 通过订阅状态管理中心的状态，直接订阅数据源。 实现消息的传输。常用于跨组件共享状态变量。</p><h2 id="eventbus" tabindex="-1">EventBus <a class="header-anchor" href="#eventbus" aria-label="Permalink to &quot;EventBus&quot;">​</a></h2><p>事件总线。</p>',11)]))}const u=t(r,[["render",i]]);export{m as __pageData,u as default};
