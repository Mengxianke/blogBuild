import{_ as i,c as a,aO as n,o as t}from"./chunks/framework.DEWO2zTc.js";const l="/blogBuild/prototype/prototype.png",e="/blogBuild/prototype/prototypeChain.png",h="/blogBuild/prototype/harmonyAspect.png",y=JSON.parse('{"title":"原型与原型链","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/jsFundation/concept/index.md","filePath":"knowledge/jsFundation/concept/index.md"}'),p={name:"knowledge/jsFundation/concept/index.md"};function k(r,s,d,o,g,E){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-label="Permalink to &quot;原型与原型链&quot;">​</a></h1><p>原型对象 <img src="'+l+'" alt="An image"> 构造函数的prototype属性指向一个实例的原型对象。 一个实例的原型对象的__proto__属性也指向该原型对象。 类的原型对象承载着该对象实例方法和属性。 原型链 <img src="'+e+'" alt="An image"> 原型对象也是一个对象，原型对象的__proto__属性指向另一个原型对象。 指向的另一个原型的对象，成为原型的原型。 当访问一个实例对象的属性或方法时，现在对象本上上寻找，如果没有，就去它对应的原型对象上寻找，如果没有找到， 则沿着原型链，在原型的原型上去寻找。直到找到对应的属性或方法，或者到达原型链的顶端(null)为止。</p><h2 id="原型链的应用" tabindex="-1">原型链的应用 <a class="header-anchor" href="#原型链的应用" aria-label="Permalink to &quot;原型链的应用&quot;">​</a></h2><h3 id="es5继承" tabindex="-1">ES5继承 <a class="header-anchor" href="#es5继承" aria-label="Permalink to &quot;ES5继承&quot;">​</a></h3><h3 id="鸿蒙插桩" tabindex="-1">鸿蒙插桩 <a class="header-anchor" href="#鸿蒙插桩" aria-label="Permalink to &quot;鸿蒙插桩&quot;">​</a></h3><p><img src="'+h+`" alt="An image"></p><ol><li>类的所有实例方法均定义在类的原型对象上</li><li>类的原型对象, 被这个类的所有实例所共享。修改类的原型对象，会对所有实例产生效果。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// addBefore 的伪代码实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(targetClass, methodName , isStatic , before:Function) : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 根据是否静态方法，获取要插装的对象（是“类” ，还是“类的原型对象”）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> targetClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> targetClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 根据方法名，获取原有的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target[methodName];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 定义新的方法（包装一层），实现优先执行before的逻辑，然后执行原有方法origin，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 最后将返回结果给 外层调用者。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newFuncs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 先执行before方法，再执行当前方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args);    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用新函数生效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[methodName] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newFuncs；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h1><p>参考:</p><ol><li><a href="https://github.com/mqyqingfeng/blog/issues/2" target="_blank" rel="noreferrer">https://github.com/mqyqingfeng/blog/issues/2</a></li><li><a href="https://juejin.cn/post/7389912518704922636" target="_blank" rel="noreferrer">https://juejin.cn/post/7389912518704922636</a></li></ol>`,11)]))}const F=i(p,[["render",k]]);export{y as __pageData,F as default};
