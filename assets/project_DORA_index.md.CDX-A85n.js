import{_ as e,c as o,aO as r,o as l}from"./chunks/framework.DEWO2zTc.js";const i="/blogBuild/project/devlake/devlake_architecture.svg",p=JSON.parse('{"title":"效能度量指标","description":"","frontmatter":{},"headers":[],"relativePath":"project/DORA/index.md","filePath":"project/DORA/index.md"}'),t={name:"project/DORA/index.md"};function n(d,a,s,h,c,m){return l(),o("div",null,a[0]||(a[0]=[r('<h1 id="效能度量指标" tabindex="-1">效能度量指标 <a class="header-anchor" href="#效能度量指标" aria-label="Permalink to &quot;效能度量指标&quot;">​</a></h1><ol><li>一次通过率</li><li>代码当量</li><li>CI/CD的成功率</li><li>.....</li></ol><h1 id="devlake架构" tabindex="-1">devlake架构 <a class="header-anchor" href="#devlake架构" aria-label="Permalink to &quot;devlake架构&quot;">​</a></h1><p><img src="'+i+'" alt="An image"></p><h2 id="data-models" tabindex="-1">Data Models <a class="header-anchor" href="#data-models" aria-label="Permalink to &quot;Data Models&quot;">​</a></h2><p>Devlake提供的数据模型。 通过Data Models的定义， 不同的数据源的数据均需要通过一系列的转化 最终变成devlake的效能度量指标所需要的数据。 因此devlake的database数据库中存储的数据层次分为<code>Raw Layer</code>, <code>Tool Layer</code>, <code>Domain Layer</code></p><h3 id="raw-layer" tabindex="-1">Raw Layer <a class="header-anchor" href="#raw-layer" aria-label="Permalink to &quot;Raw Layer&quot;">​</a></h3><p>将通过API访问的原始数据json数据格式存储在Raw Layer层。</p><h3 id="tool-layer" tabindex="-1">Tool Layer <a class="header-anchor" href="#tool-layer" aria-label="Permalink to &quot;Tool Layer&quot;">​</a></h3><p>Tool Layer层为自定义的表结构。Tool Layer层访问Raw Layer层的数据， 将原始数据json数据格式转化成表结构中的数据。</p><h3 id="domain-layer" tabindex="-1">Domain Layer <a class="header-anchor" href="#domain-layer" aria-label="Permalink to &quot;Domain Layer&quot;">​</a></h3><p>Domain Layer层为更高层次的抽象层。 存储的数据与效能度量指标直接相关。Devlake提供6种Domain领域用来。 Domain Layer层访问Tool Layer层的数据， 将访问的数据，转化成devlake的6种Domain领域所需要的表结果: <a href="https://devlake.apache.org/zh/docs/DataModels/DevLakeDomainLayerSchema#dwd-entities---data-warehouse-detail" target="_blank" rel="noreferrer">DWD Entities</a>。</p><ol><li>Issue Tracking</li><li>Source Code Management</li><li>Code Review</li><li>CI/CD</li><li>Code Quality</li><li>Cross-Domain Entities</li></ol><h1 id="开发自定义的plugin" tabindex="-1">开发自定义的Plugin <a class="header-anchor" href="#开发自定义的plugin" aria-label="Permalink to &quot;开发自定义的Plugin&quot;">​</a></h1><h2 id="前端config-ui" tabindex="-1">前端Config-UI <a class="header-anchor" href="#前端config-ui" aria-label="Permalink to &quot;前端Config-UI&quot;">​</a></h2><h2 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h2><h1 id="grafana" tabindex="-1">Grafana <a class="header-anchor" href="#grafana" aria-label="Permalink to &quot;Grafana&quot;">​</a></h1><p>连接数据库，将数据可视化。</p>',18)]))}const f=e(t,[["render",n]]);export{p as __pageData,f as default};
