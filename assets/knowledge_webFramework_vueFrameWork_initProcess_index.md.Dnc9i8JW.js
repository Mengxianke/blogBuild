import{_ as s,c as a,aO as e,o as n}from"./chunks/framework.DEWO2zTc.js";const t="/blogBuild/framework/Vue_initProcess.jpg",E=JSON.parse('{"title":"知识框架","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/webFramework/vueFrameWork/initProcess/index.md","filePath":"knowledge/webFramework/vueFrameWork/initProcess/index.md"}'),l={name:"knowledge/webFramework/vueFrameWork/initProcess/index.md"};function p(r,i,h,o,k,d){return n(),a("div",null,i[0]||(i[0]=[e('<h1 id="知识框架" tabindex="-1">知识框架 <a class="header-anchor" href="#知识框架" aria-label="Permalink to &quot;知识框架&quot;">​</a></h1><p><img src="'+t+`" alt="An image"></p><h1 id="vue组件的初始化的顺序" tabindex="-1">Vue组件的初始化的顺序 <a class="header-anchor" href="#vue组件的初始化的顺序" aria-label="Permalink to &quot;Vue组件的初始化的顺序&quot;">​</a></h1><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initLifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initInjections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initProvide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;created&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vm.$options.el) {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm.$options.el)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>new Vue()调用_init()函数:<br> 初始化生命周期，事件，渲染($createElement, $attrs, $listeners)。<br> 调用beforeCreate组件创建之前的钩子。<br> beforeCreate生命周期中无法通过vm访问到data中的数据和方法。<br> initInjections注入祖辈传递的数据。</p><p><strong>initState, 组件初始化:</strong></p><ol><li>在组件初始化的过程中，给数据data添加响应式，</li><li>并创建computed watcher和watch watcher。</li><li>通过创建的watcher实例对computed中和watch中的数据进行依赖收集。初始化Proivde。 调用生命周期函数created, 可以通过vm访问到data中的数据，methods中配置的方法。</li></ol><p><strong>挂载元素:</strong></p><ol><li>调用挂载方法vm.$mount函数，</li><li>$mount函数中，使用<code>compileToFunctions</code>, 将template解析ast tree， 将ast tree转换成render语法字符串。生成render方法。</li><li>调用mount方法<code>mount.call(this, el, hydrating)</code>。mount方法中调用<code>mountComponent</code>渲染组件。</li></ol><p><strong>渲染组件:</strong></p><ol><li>执行beforeMount钩子</li><li>定义updateComponent渲染页面视图的方法</li><li>生成Render Watcher</li><li>Render Watcher中执行updateComponent渲染视图的方法， vm._render()根据渲染函数生成虚拟DOM，VNode</li><li>执行vm._update()方法调用patch方法，将VNode转换成真实的DOM 调用mounted生命周期钩子</li></ol>`,11)]))}const m=s(l,[["render",p]]);export{E as __pageData,m as default};
