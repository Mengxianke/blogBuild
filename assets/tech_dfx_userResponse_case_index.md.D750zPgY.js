import{_ as a,c as i,aO as e,o as n}from"./chunks/framework.DEWO2zTc.js";const t="/blogBuild/hmsPerformance/responseDelay1.png",p="/blogBuild/hmsPerformance/responseDelay2.png",l="/blogBuild/hmsPerformance/responseDelay3.png",m=JSON.parse('{"title":"响应时延Case","description":"","frontmatter":{},"headers":[],"relativePath":"tech/dfx/userResponse/case/index.md","filePath":"tech/dfx/userResponse/case/index.md"}'),h={name:"tech/dfx/userResponse/case/index.md"};function r(k,s,c,d,o,g){return n(),i("div",null,s[0]||(s[0]=[e('<h1 id="响应时延case" tabindex="-1">响应时延Case <a class="header-anchor" href="#响应时延case" aria-label="Permalink to &quot;响应时延Case&quot;">​</a></h1><h3 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h3><p>公交地铁规划页面, 滑动列表丢帧。</p><h3 id="trace分析" tabindex="-1">Trace分析 <a class="header-anchor" href="#trace分析" aria-label="Permalink to &quot;Trace分析&quot;">​</a></h3><p>通过Profiler工具抓trace, User Event: 找到滑动事件。在滑动Swipe事件后，检查RenderService泳道, 发现RenderService连续丢帧。</p><p><img src="'+t+'" alt="An image"></p><p><img src="'+p+'" alt="An image"> 寻找RenderService第888帧, 在App侧关联的切片。 发现应用测第888帧开始时间远远滞后于，期望开始时间。因此，合理推断，有任务阻塞了UI线程。</p><p>打开ArkVm，查看调用堆栈。发现在期望开始时间附近，有密集函数执行和调用情况，搜索该函数名称， 发现频繁调用。 <img src="'+l+`" alt="An image"></p><h3 id="根因分析" tabindex="-1">根因分析 <a class="header-anchor" href="#根因分析" aria-label="Permalink to &quot;根因分析&quot;">​</a></h3><p>代码Review</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calcxxxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将计算型任务已经下沉至Native侧</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 此处调用native进行计算任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>查看calcxxx调用点:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 双层for循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calcxxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 进入微任务队列, 执行then后后记</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 省略业务代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>单次CPU计算型任务下沉至Native侧，开启另一个线程单独处理。此处为CPU密集型任务, 进而阻塞了UI线程，导致提交渲染任务执行较晚。</p>`,14)]))}const y=a(h,[["render",r]]);export{m as __pageData,y as default};
