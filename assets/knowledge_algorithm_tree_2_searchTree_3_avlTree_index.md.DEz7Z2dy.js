import{_ as e,c as l,aO as t,o as r}from"./chunks/framework.DEWO2zTc.js";const i="/blogBuild/algorithm/avl_right_rotate.png",o="/blogBuild/algorithm/avl_left_rotate.png",n="/blogBuild/algorithm/avl_left_right_rotate.png",s="/blogBuild/algorithm/avl_right_left_rotate.png",b=JSON.parse('{"title":"旋转","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/algorithm/tree/2_searchTree/3_avlTree/index.md","filePath":"knowledge/algorithm/tree/2_searchTree/3_avlTree/index.md"}'),h={name:"knowledge/algorithm/tree/2_searchTree/3_avlTree/index.md"};function d(c,a,m,_,g,p){return r(),l("div",null,a[0]||(a[0]=[t('<h1 id="旋转" tabindex="-1">旋转 <a class="header-anchor" href="#旋转" aria-label="Permalink to &quot;旋转&quot;">​</a></h1><p>在保证二叉树的性质下，通过对节点的旋转，使得树的高度维持在平衡的状态。 AVL旋转树要求，最有子树的高度差不能超过1。当左右子树的高度超过1后，将通过旋转的 操作，将左右子树的高度差保持在1以内，且旋转后的树也依旧符合二叉树的性质。 旋转的操作分为，右旋，左旋，左右旋，以及右左旋。 左右旋与右左旋结合了左旋与右旋的情况。</p><h2 id="右旋" tabindex="-1">右旋 <a class="header-anchor" href="#右旋" aria-label="Permalink to &quot;右旋&quot;">​</a></h2><p><img src="'+i+'" alt="An image"> 在某个子树的左子树的左子树上插入新节点，导致根节点的平衡因子由1变成2。<br> 采用右旋转。</p><ol><li>将失衡节点的左指针指向当前节点左子树的右子树节点。</li><li>将当前失衡节点的左子树提升为父节点，失衡节点作为其右子树节点。</li></ol><h2 id="左旋" tabindex="-1">左旋 <a class="header-anchor" href="#左旋" aria-label="Permalink to &quot;左旋&quot;">​</a></h2><p><img src="'+o+'" alt="An image"> 在某个子树的右子树的右子树上插入新节点，导致根节点的平衡因子由-1 变成 -2。<br> 采用左旋转。</p><ol><li>将失衡节点的右指针指向当前节点右子树的左子树节点。</li><li>将当前失衡节点的右子树提升为父节点，失衡节点作为其左子树节点。</li></ol><h2 id="左右旋" tabindex="-1">左右旋 <a class="header-anchor" href="#左右旋" aria-label="Permalink to &quot;左右旋&quot;">​</a></h2><p><img src="'+n+'" alt="An image"> 在某个子树的左子树的右子树上插入新节点，导致根节点的平衡因子由-1 变成 -2。</p><ol><li>针对失衡节点的左子树进行左旋。</li><li>左旋后，当前的状况可以看似在失衡节点的子树的左子树的左子树上插入节点，导致的失衡。 因此对当前的树再进行一次右旋。达到平衡状态。</li></ol><h2 id="右左旋" tabindex="-1">右左旋 <a class="header-anchor" href="#右左旋" aria-label="Permalink to &quot;右左旋&quot;">​</a></h2><p><img src="'+s+'" alt="An image"> 在某个子树的左子树的右子树上插入新节点，导致根节点的平衡因子由-1 变成 -2。</p><ol><li>针对失衡节点的右子树进行右旋转</li><li>右选后，当前的状况可以看作在失衡节点的子树的右子树的右子树上插入节点，导致的失衡。 因此对当前的树再进行一次左旋，达到平衡。</li></ol>',14)]))}const f=e(h,[["render",d]]);export{b as __pageData,f as default};
