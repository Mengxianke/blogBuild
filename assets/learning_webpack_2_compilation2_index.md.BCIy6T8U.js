import{_ as i,c as a,aO as n,o as h}from"./chunks/framework.DEWO2zTc.js";const k="/blogBuild/learning/webpack/wepback_core_modules_2.png",p="/blogBuild/learning/webpack/webpack_chunkGroup.webp",c=JSON.parse('{"title":"Webpack核心对象","description":"","frontmatter":{},"headers":[],"relativePath":"learning/webpack/2_compilation2/index.md","filePath":"learning/webpack/2_compilation2/index.md"}'),t={name:"learning/webpack/2_compilation2/index.md"};function l(e,s,r,E,d,o){return h(),a("div",null,s[0]||(s[0]=[n('<p>在了解了打包过程中构建过程中的核心对象模型后。 本章节将着眼于生成阶段的核心对象。同样，我们还是从概念出发， 了解webpack在这个阶段涉及到的概念，并同时 梳理清楚在这个阶段上的类的职责与类间关系。</p><h1 id="webpack核心对象" tabindex="-1">Webpack核心对象 <a class="header-anchor" href="#webpack核心对象" aria-label="Permalink to &quot;Webpack核心对象&quot;">​</a></h1><p><img src="'+k+`" alt="An image"></p><p>从对象模型上看，这个阶段Wepback涉及到三个重要的概念。分别是: <code>Chunk</code>, <code>ChunkGroup</code>, <code>EntryPoint</code>。 在类间关系上，EntryPoint继承于ChunkGroup, 通过继承的角度，我们知道EntryPoint是一种ChunkGroup。 一个ChunkGroup包含多个Chunk块，属于一对多的关联关系。此外，ChunkGroup与ChunkGroup之间存在父子关系。 一个ChunkGroup可以包含多个ChunkGroup。 同时在这个阶段，会生成<code>ChunkGraph</code>。跟前文中的<code>ModuleGraph</code>类似，数据结构上是一种图，<code>ModuleGraph</code> 体现了模块与模块之前的依赖关系，<code>ChunkGraph</code>体现的是<code>Chunk</code>与<code>Module</code>之间的关系。 这种关联关系的建立是通过ChunkGroup这个类完成。下边从这些概念入手，看webpack是如何<strong>表达</strong>这些概念和如何建模的。</p><h2 id="chunk" tabindex="-1">Chunk <a class="header-anchor" href="#chunk" aria-label="Permalink to &quot;Chunk&quot;">​</a></h2><p>一个Chunk(块)包含一个或多个模块。在webpack的配置声明entry对象的时候<code>entry: { &lt;entryChunkName&gt; string | [string] } | {}</code>， key是entryChunkName, value是打包的入口文件路径。打包后，在dist文件目录下，它对应的是一个Chunk。 输出的文件名为entry.e961b9d8d1b49fe17488.js。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/to/my/entry/file.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>如果需要将多个文件打包进入一个chunk, 可以将入口文件路径组成一个数组。 如下的配置文件，a.js文件与a1.js文件将打包到同一个Chunk中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    foo: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在上一篇的文章中我们介绍过Module的概念，a.js文件和a1.js文件分别都是一个模块。 这个模块是通过EntryPlugin构造出一个EntryDependency依赖后，通过工厂，将依赖工厂化后得到的结果。 根据ModuleGraph我们能够找到模块依赖的模块。这些相互依赖的模块就会被打入到一个Chunk中。 这样在导入加载这个Chunk的时候，这个文件的依赖也会被导入，这就是webpack帮我们实现了自动管理文件依赖的功能。 因此，一个Chunk需要建立其与Module之间的关系，所以Chunk这个类上的行为有<code>addModule</code>, <code>removeModule</code>, <code>containsModule</code>, <code>getModules</code>, <code>moveModule</code>这些行为。这些行为的目的就是在构建Chunk与Module之间的关系。 我们从源码中也可以看到，Chunk类使用了<strong>ChunkGroup这个类上的静态方法</strong>。它们的关系是依赖关系，借助ChunkGroup上的方法， 进行关联。这个关联关系的<strong>维护方是ChunkGroup类</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">backCompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chunkGraph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChunkGraph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChunkGraphForChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&quot;Chunk.addModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&quot;DEP_WEBPACK_CHUNK_ADD_MODULE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chunkGraph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isModuleInChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chunkGraph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connectChunkAndModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    removeModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		ChunkGraph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChunkGraphForChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&quot;Chunk.removeModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&quot;DEP_WEBPACK_CHUNK_REMOVE_MODULE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnectChunkAndModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // .....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="chunkgroup" tabindex="-1">ChunkGroup <a class="header-anchor" href="#chunkgroup" aria-label="Permalink to &quot;ChunkGroup&quot;">​</a></h2><p>ChunkGroup是Wepback构造出的另一个概念。 为什么有需要有ChunkGroup的概念?</p><p>ChunkGroup用于组织多个Chunk</p><p>ChunkGorup这个类上的属性</p><h2 id="entrypoint" tabindex="-1">EntryPoint <a class="header-anchor" href="#entrypoint" aria-label="Permalink to &quot;EntryPoint&quot;">​</a></h2><p>EntryPoint继承ChunkGroup</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// key: 入口名称 value: 入口文件的路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    foo: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bar: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="chunk、-chunkgroup-、entrypoint" tabindex="-1">Chunk、 ChunkGroup 、EntryPoint <a class="header-anchor" href="#chunk、-chunkgroup-、entrypoint" aria-label="Permalink to &quot;Chunk、 ChunkGroup 、EntryPoint&quot;">​</a></h2><p><img src="`+p+'" alt="An image"></p><h2 id="chunkgraph" tabindex="-1">ChunkGraph <a class="header-anchor" href="#chunkgraph" aria-label="Permalink to &quot;ChunkGraph&quot;">​</a></h2><h2 id="chunkgraphchunk" tabindex="-1">ChunkGraphChunk <a class="header-anchor" href="#chunkgraphchunk" aria-label="Permalink to &quot;ChunkGraphChunk&quot;">​</a></h2><h2 id="chunkgraphmodule" tabindex="-1">ChunkGraphModule <a class="header-anchor" href="#chunkgraphmodule" aria-label="Permalink to &quot;ChunkGraphModule&quot;">​</a></h2>',23)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
