import{_ as s,c as i,aO as e,o as n}from"./chunks/framework.DEWO2zTc.js";const l="/blogBuild/webpack/entryToModuleTree.png",t="/blogBuild/webpack/treeToModuleGraph.png",p="/blogBuild/webpack/graphToChunk.png",u=JSON.parse('{"title":"为何需要webpack打包工具?","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/ModuleSystem/webpack/index.md","filePath":"knowledge/ModuleSystem/webpack/index.md"}'),h={name:"knowledge/ModuleSystem/webpack/index.md"};function r(k,a,d,o,c,E){return n(),i("div",null,a[0]||(a[0]=[e('<h1 id="为何需要webpack打包工具" tabindex="-1">为何需要webpack打包工具? <a class="header-anchor" href="#为何需要webpack打包工具" aria-label="Permalink to &quot;为何需要webpack打包工具?&quot;">​</a></h1><h1 id="webpack中的重要概念" tabindex="-1">webpack中的重要概念 <a class="header-anchor" href="#webpack中的重要概念" aria-label="Permalink to &quot;webpack中的重要概念&quot;">​</a></h1><h1 id="webpack打包构建流程" tabindex="-1">webpack打包构建流程 <a class="header-anchor" href="#webpack打包构建流程" aria-label="Permalink to &quot;webpack打包构建流程&quot;">​</a></h1><p><img src="'+l+'" alt="An image"></p><h3 id="生成modulegraph" tabindex="-1">生成ModuleGraph <a class="header-anchor" href="#生成modulegraph" aria-label="Permalink to &quot;生成ModuleGraph&quot;">​</a></h3><p><img src="'+t+`" alt="An image"> 构建流程:</p><ol><li>创建 loader 上下文, 执行 runLoaders, 翻译源码</li><li>翻译后的结果，通过acorn(javascript parse)解析并生成抽象语法树</li><li>分析抽象语法树，根据AST寻找依赖，当一个模块编译成功之后，有会根据其 AST 查找依赖，递归整个构建流程，直到整个所有依赖都被处理完</li><li>获取所有的Module(模块)</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runLoaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loaders: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.loaders,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context: loaderContext,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        this_ast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行callback, 获取AST</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="通过modulegraph-生成chunk" tabindex="-1">通过ModuleGraph，生成Chunk <a class="header-anchor" href="#通过modulegraph-生成chunk" aria-label="Permalink to &quot;通过ModuleGraph，生成Chunk&quot;">​</a></h3><p><img src="`+p+'" alt="An image"></p><h2 id="常见的loader" tabindex="-1">常见的loader <a class="header-anchor" href="#常见的loader" aria-label="Permalink to &quot;常见的loader&quot;">​</a></h2><h2 id="常见的plugin" tabindex="-1">常见的plugin <a class="header-anchor" href="#常见的plugin" aria-label="Permalink to &quot;常见的plugin&quot;">​</a></h2><p>参考:</p><ol><li><a href="https://angular.love/an-in-depth-perspective-on-webpacks-bundling-process" target="_blank" rel="noreferrer">https://angular.love/an-in-depth-perspective-on-webpacks-bundling-process</a></li><li><a href="https://angular.love/webpack-an-in-depth-introduction-to-splitchunksplugin" target="_blank" rel="noreferrer">https://angular.love/webpack-an-in-depth-introduction-to-splitchunksplugin</a></li></ol>',14)]))}const b=s(h,[["render",r]]);export{u as __pageData,b as default};
