import{_ as e,c as d,aO as a,o as r}from"./chunks/framework.DEWO2zTc.js";const o="/blogBuild/hmsPerformance/lostFrameMethdology.png",p=JSON.parse('{"title":"响应时延排查思路","description":"","frontmatter":{},"headers":[],"relativePath":"tech/dfx/userResponse/methodology/index.md","filePath":"tech/dfx/userResponse/methodology/index.md"}'),s={name:"tech/dfx/userResponse/methodology/index.md"};function i(l,t,n,m,c,h){return r(),d("div",null,t[0]||(t[0]=[a('<h1 id="响应时延排查思路" tabindex="-1">响应时延排查思路 <a class="header-anchor" href="#响应时延排查思路" aria-label="Permalink to &quot;响应时延排查思路&quot;">​</a></h1><p>丢帧卡顿整体排查思路 <img src="'+o+'" alt="An image"></p><p>列表滑动Trace点:</p><table tabindex="0"><thead><tr><th>Trace</th><th>描述</th><th>事件说明</th></tr></thead><tbody><tr><td>H: FlushVsync</td><td>处理用户输入、刷新试图同步事件、计算帧信息、提交渲染绘制</td><td></td></tr><tr><td>H: FlushLayoutTask</td><td>执行布局任务</td><td></td></tr><tr><td>H: CreateTaskMeasure[List] H: Measure[List]</td><td>执行List布局测量任务</td><td></td></tr><tr><td>H: CustomNode: BuildItem: [%s]</td><td>组件创建时长， 包含组件下各种布局，组件创建时长。 Create[Flex], Create[Row]....</td><td>检查创建时长</td></tr><tr><td>H: Builder: BuildLazyItem</td><td>创建LazyItem</td><td>LazyForEach机制下，创建LazyItem</td></tr><tr><td>H: CutomNode: BuildRecycle</td><td>触发复用渲染</td><td>通过@Reusable，触发组件布局复用机制</td></tr><tr><td>H: ListLayoutAlgorithm: Measure ListItem H: Measure[ListItem]</td><td>计算ListItem列表项布局</td><td>检查布局时长</td></tr><tr><td>H: CustomNodeBase: Destory H: aboutToBeDeleted</td><td>销毁组件</td><td>LazyForEach销毁</td></tr></tbody></table>',4)]))}const y=e(s,[["render",i]]);export{p as __pageData,y as default};
