import{_ as t,c as o,aO as a,o as i}from"./chunks/framework.DEWO2zTc.js";const m=JSON.parse('{"title":"Vuex","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/webFramework/vueFrameWork/4vuex/index.md","filePath":"knowledge/webFramework/vueFrameWork/4vuex/index.md"}'),l={name:"knowledge/webFramework/vueFrameWork/4vuex/index.md"};function r(s,e,u,n,c,d){return i(),o("div",null,e[0]||(e[0]=[a('<h1 id="vuex" tabindex="-1">Vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;Vuex&quot;">​</a></h1><p>Vuex全局状态管理， 保证数据单向流动，组件不能直接修改State的状态，如果想要改变，必须通commit提交mutations. Vuex解决的问题:</p><ol><li>Vuex保证数据单向流动，全局的状态管理。避免多个组件修改状态导致混乱以及无法追踪来源</li><li>对于多层嵌套的组件，提供除了provide/inject方法外，额外的组件传递方法。 对于兄弟节点组件，提供除了Event-bus外，额外的共享状态的形式</li><li>在state中定义的</li></ol><h2 id="vuex核心属性" tabindex="-1">Vuex核心属性 <a class="header-anchor" href="#vuex核心属性" aria-label="Permalink to &quot;Vuex核心属性&quot;">​</a></h2><ol><li>state</li><li>getters: <ol><li>getters类似于Vue组件中的computed计算属性。进行派生计算，并缓存结果。只有当依赖的数据进行</li><li>组件中使用getters, 可以通过this.$store.getters.xxxx， 也可以使用mapGetters辅助函数，将其映射到computed属性中</li></ol></li><li>mutations <ol><li>改变状态的唯一途径: mutations是唯一允许直接修改state的途径</li><li>mutations必须使用的是同步函数</li><li>actions中通过store.commit方法触发mutation</li></ol></li><li>actions <ol><li>组件通过dispatch action的方法，修改Vuex中store的状态</li><li>dispatch aciton的返回值是一个promise, 可以用来接受到dispatch action后的结果</li></ol></li><li>modules 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store对象就有可能变得相当臃肿。为了解决以上问题，Vuex允许我们将store分割成模块。每个模块都有自己的<code>state</code>, <code>actions</code>, <code>mutations</code></li></ol><h2 id="vuex与localstorage" tabindex="-1">Vuex与LocalStorage <a class="header-anchor" href="#vuex与localstorage" aria-label="Permalink to &quot;Vuex与LocalStorage&quot;">​</a></h2><ol><li>Vuex提供了集中式的状态管理方案，组件可以订阅状态的变化。 LocalStorage是一个简单的本地存储，适用于数据量比较小的场景。</li><li>Vuex中的state可以存储多种数据类型，LocalStorage只能存储字符串类型，需要通过JSON.stringify()将对象转化为字符串存储</li><li>Vuex刷新页面的时候会导致数据丢失, LocalStorage本地化持久存储。</li></ol>',7)]))}const h=t(l,[["render",r]]);export{m as __pageData,h as default};
