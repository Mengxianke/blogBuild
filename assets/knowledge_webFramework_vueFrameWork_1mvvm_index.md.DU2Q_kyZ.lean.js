import{_ as i,c as a,aO as e,o as n}from"./chunks/framework.DEWO2zTc.js";const o=JSON.parse('{"title":"依赖收集的过程","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/webFramework/vueFrameWork/1mvvm/index.md","filePath":"knowledge/webFramework/vueFrameWork/1mvvm/index.md"}'),t={name:"knowledge/webFramework/vueFrameWork/1mvvm/index.md"};function l(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="依赖收集的过程" tabindex="-1">依赖收集的过程 <a class="header-anchor" href="#依赖收集的过程" aria-label="Permalink to &quot;依赖收集的过程&quot;">​</a></h1><p>依赖收集围绕Observer, Dep, Wacher类展开。 采用观察者的模式，对视图进行更新。 Watcher是被观察者，Dep是被观察者。Observer类通过数据的劫持和拦截负责将观察者对象注册到被观察者的观察者列表中。 并通知Watcher类对视图进行更新。</p><p>创建三者的关系是在创建Vue的过程:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initLifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initInjections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initProvide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;created&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vm.$options.el) {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm.$options.el)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在initState(vm)中</p><ol><li>调用initData，通过defineReactive给数据的get, set方法进行拦截。</li><li>调用initComputed，创建computed Watcher, 对定义在computed函数中的变量进行依赖收集</li><li>调用initWatch, 创建watch Watcher, 对定义在watch中的响应变量进行依赖收集</li><li>在组件挂载的过程中，生成Render Watcher, 对定义在模板中的响应式变量进行依赖收集</li></ol>`,6)]))}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
